<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/2021/07/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/04/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-为什么要用vue"><a href="#1-为什么要用vue" class="headerlink" title="1. 为什么要用vue"></a>1. 为什么要用vue</h4><ol><li>数据与视图分离</li><li>性能更高，减少了dom操作（diff算法）</li><li>组件化开发（每个组件都有自己的作用域）</li></ol><p>vue全家桶：vue vuex vue-router axios elementui/antd webpack node npm es6 vue/di</p><h4 id="bootStrap提醒老师讲"><a href="#bootStrap提醒老师讲" class="headerlink" title="bootStrap提醒老师讲"></a>bootStrap提醒老师讲</h4><h4 id="2-差值表达式"><a href="#2-差值表达式" class="headerlink" title="2. 差值表达式"></a>2. 差值表达式</h4><p>双大括号提供了一个js执行环境，可以写任意的js表达式，但是不识别html结构</p><h4 id="3-指令"><a href="#3-指令" class="headerlink" title="3. 指令"></a>3. 指令</h4><p><strong>指令都是以<code>v-</code>开头的，实现特定的功能，写在元素的开始标签中</strong><br><strong>注意：</strong>所有的指令后面的引号<code>&quot;&quot;</code>是提供一个js执行环境，不是字符串的引号，要想在里面写字符串需要双引号里嵌套单引号</p><ol><li><p>v-html=”数据” 把一段html结构渲染到他所绑定的元素中</p></li><li><p>v-text 和双打扩号作用差不多，不识别html标签</p></li><li><p>v-bind:属性=”数据” 可简写为 <code>:属性=&quot;数据&quot;</code></p><ul><li><p>特殊情况:class</p><ol><li>可以绑定一个字符串，字符串名就是class名</li><li>可以绑定一个对象，对象的属性名就是class名，对象的属性值是布尔值，代表是否有这个class名</li><li>可以绑定一个数组，引号里是数组的变量名，变量值就是class名</li></ol></li><li><p>特殊情况: style</p><ol><li>绑定一个对象，对象就是样式对象</li><li>绑定一个数组，就是绑定多个样式对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"weather"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"msg"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"style2"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#weather"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//class名</span>            msg<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            msg2<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>class1<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>class2<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            msg3<span class="token operator">:</span><span class="token punctuation">&#123;</span>classn<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//style样式</span>            style1<span class="token operator">:</span><span class="token punctuation">&#123;</span>                width<span class="token operator">:</span><span class="token string">"100px"</span><span class="token punctuation">,</span>                height<span class="token operator">:</span><span class="token string">"200px"</span><span class="token punctuation">,</span>                background<span class="token operator">:</span><span class="token string">"red"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            style2<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>width<span class="token operator">:</span><span class="token string">"300px"</span><span class="token punctuation">,</span>height<span class="token operator">:</span><span class="token string">"300px"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>background<span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p>v-on:事件名=”函数名” 缩写成@事件名=”函数” **注意:**如果函数没有参数不能在后面加括号<code>fn()</code>错误，有参数才能加<code>fn(n)</code>正确</p></li><li><p>v-if v-else-if v-else 真正的条件渲染(真正删除了元素)，只能做显示隐藏<strong>尽量避免和v-for一起使用，因为v-for的优先级是大于v-if的,所以循环几次v-if就会使用几次</strong></p></li><li><p>v-show 条件渲染，只是基于样式的切换(将display属性改变)<br><strong>区别</strong>:v-show有更高的初始渲染消耗，v-if有更高的切换消耗</p></li><li><p>v-for=”item in array” 列表渲染（动态循环创建元素）</p><ul><li>可以循环一个数组，item代表每一项  参数有(item index)</li><li>可以循环一个对象, item代表每一项的value 参数有(value key index)<strong>第一个参数不用直接写null,一般不会有这种情况</strong></li><li><strong>注意</strong>:数组是不能直接通过角标和length进行修改，这些都不是响应式的</li><li>对于对象来说，如果添加<strong>本来不存在</strong>的属性，那么该属性也不是响应式的<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 如果需要修改，选择数组自带的方法，或者使用Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>要修改的数据<span class="token punctuation">,</span>角标<span class="token punctuation">,</span>新值<span class="token punctuation">)</span>，也可以对数组进行重新赋值（进行全体换）<span class="token number">2.</span> 如果需要添加对象属性<span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>要修改的对象<span class="token punctuation">,</span>属性名<span class="token punctuation">,</span>属性值<span class="token punctuation">)</span>（一般情况是不会删除对象属性的）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>v-model:表单标签的双向绑定</p><ul><li>v-model默认绑定到表单的value属性</li><li>多选框：单个多选框，绑定到布尔值，多个复选框，绑定的是数组</li><li>单选框：值直接绑定到value值</li><li>下拉选择框：直接绑定到值（给select加v-model）、</li></ul></li></ol><h4 id="4-methods"><a href="#4-methods" class="headerlink" title="4. methods"></a>4. methods</h4><p>methods里面写所有的函数，<strong>如果在模板中调用methods里面的函数的话，改变其他与之无关的值，会导致该函数再次执行</strong>，可以用计算属性来解决</p><h4 id="5-computed：计算属性"><a href="#5-computed：计算属性" class="headerlink" title="5. computed：计算属性"></a>5. computed：计算属性</h4><p><strong>将逻辑运算写在这里面，避免在模板里面写过多的js逻辑</strong></p><ul><li>计算属性是一个函数，一定要return一个值</li><li>计算属性里面的函数一定是它所依赖的值发生变化才会去执行的（不主动调用）</li><li>性能：计算属性的性能更高</li><li><strong>计算属性的属性名（函数名）不能和data里面的变量名一样，计算属性可以同时处理多个数据的变化</strong></li></ul><p><strong>面试题？？？？</strong>计算属性和函数的区别：</p><h4 id="6-watch-监听器"><a href="#6-watch-监听器" class="headerlink" title="6. watch:监听器"></a>6. watch:监听器</h4><p><strong>用来监听一个数据，只要数据发生变化，就会执行一个函数</strong><br>要监听的数据（data或者computed里面的）名就是函数名，<br><strong>面试题？？？？</strong>监听器和计算属性的区别：监听器是干什么事情的，计算属性是返回一个值的。</p><h4 id="7-验证为什么v-for循环需要key案例"><a href="#7-验证为什么v-for循环需要key案例" class="headerlink" title="7. 验证为什么v-for循环需要key案例"></a>7. 验证为什么v-for循环需要key案例</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>div id <span class="token operator">=</span> <span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"see"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>更改<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            see<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>see<span class="token operator">=</span><span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个案例有两个input输入框，不同点只是input框的type属性不一样，使用v-if和 v-else命令对输入框进行条件渲染，当点击更改按钮时，原来text输入框的值却在后面显示的password输入框中以*号显示。<strong>原因：Vue使用diff算法，在Vue中会尽量的复用dom，vue会维护一个虚拟的dom。上面的例子Vue其实没有重新生成新的dom而是借助原来的text属性的input框，将这个输入框的属性改一下（type属性）继续复用，而value值不变，所以会发生这中情况</strong>，要想让Vue生成新的dom元素，需要在标签中绑定<code>:key=&quot;（字符串）&quot;</code>属性,这个key值应该是独一无二的。</p><h4 id="8-diff算法（自行了解）"><a href="#8-diff算法（自行了解）" class="headerlink" title="8. diff算法（自行了解）"></a>8. diff算法（自行了解）</h4><h4 id="9-事件修饰符"><a href="#9-事件修饰符" class="headerlink" title="9. 事件修饰符"></a>9. 事件修饰符</h4><p>有很多，还有按键修饰符（按键码）,<code>v-model.trim</code>自动去空格(不管有没有要修，自己注意加上)。事件修饰符可以连续调用。</p><h4 id="10-组件"><a href="#10-组件" class="headerlink" title="10. 组件"></a>10. 组件</h4><ol><li>组件的注册<ul><li>全局注册：<pre class="line-numbers language-js" data-language="js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"组件名"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span><span class="token string">"html代码块"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//其他的和Vue实例完全一样</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul> <strong>注意</strong>: data必须是一个函数,template只有一个根节点<ul><li>局部注册:(1.先定义组件的配置选项2.在要使用的组件中去注册)<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> head <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;h1>&#123;&#123;msg&#125;&#125;&lt;/h1>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            msg<span class="token operator">:</span> <span class="token string">"我是头部"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span><span class="token string">"app"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//因为要在根组件里面使用，所以在这里注册</span>        myhead<span class="token operator">:</span>head<span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>组件之间数据传递<ul><li>父–&gt;子 props<br>(1.子组件定义props 2.子组件规定该属性用在哪里 3.组件调用，在开始标签里面传递来自父组件的数据)<strong>props可以是数组，也可以是对象{属性名:类型}</strong><pre class="line-numbers language-js" data-language="js"><code class="language-js">props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span>    propA<span class="token operator">:</span> Number<span class="token punctuation">,</span>    <span class="token comment">// 多个可能的类型</span>    propB<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 必填的字符串</span>    propC<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> String<span class="token punctuation">,</span>        required<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 带有默认值的数字</span>    propD<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> Number<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>mynav <span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"style[0]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mynav<span class="token operator">></span>    <span class="token operator">&lt;</span>mynav <span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"style[1]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mynav<span class="token operator">></span>    <span class="token operator">&lt;</span>mynav <span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"style[2]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mynav<span class="token operator">></span>    <span class="token operator">&lt;</span>mynav <span class="token operator">:</span>color<span class="token operator">=</span><span class="token string">"style[3]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mynav<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> mynav <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul :style="color" style="width: 200px; list-style: none;">                    &lt;li v-for="(item,index) in navArr" :key="index"  style="margin-right: 10px; float: left; background: #5696ff">&#123;&#123;item&#125;&#125;&lt;/li>                    &lt;div style="clear: both;">&lt;/div>                &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"color"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                navArr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"首页"</span><span class="token punctuation">,</span><span class="token string">"内容"</span><span class="token punctuation">,</span><span class="token string">"游戏"</span><span class="token punctuation">,</span><span class="token string">"资讯"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            style<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>color<span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>color<span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>color<span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>color<span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            mynav<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>跨级传输数据<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>father <span class="token operator">:</span>fmsg<span class="token operator">=</span><span class="token string">"msg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>father<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> son <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h3>&#123;&#123;smsg&#125;&#125;&lt;/h3></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>                props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"smsg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> father <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="background:#5696ff;width:200px;color:white;">                    &lt;son :smsg="fmsg">&lt;/son>                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"fmsg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            son<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            msg<span class="token operator">:</span><span class="token string">"爷爷的信"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            father<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2021/06/08/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/08/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-javaScript-负责网页功能的"><a href="#1-javaScript-负责网页功能的" class="headerlink" title="1. javaScript:负责网页功能的"></a>1. javaScript:负责网页功能的</h4><p>ECMAScript(核心ES5) + DOM(页面操作) + BOM(浏览器操作相关的) <em>script需要放在body的结束标签之前</em></p><p><font color='cornflowerblue'>JS一般写在页面后面，目的是优先加在网页结构，再运行后台代码，提升用户体验</font></p><h4 id="2-编程语言"><a href="#2-编程语言" class="headerlink" title="2. 编程语言"></a>2. 编程语言</h4><p>c ：操作系统、嵌入式、驱动开发<br>c++ ：桌面软件、游戏 (英雄联盟)<br>c# ：Windows桌面软件、.NET Web、服务器<br>java:企业级应用，web开发、服务器后端<br>python<br>php<br>javaScript</p><h4 id="3-程序员"><a href="#3-程序员" class="headerlink" title="3. 程序员"></a>3. 程序员</h4><p>变量：内存中专门用来存储数据的空间<br>程序: 处理数据的 接受数据–处理数据–输出数据 程序运行在内存中<br>数据：语言啊 阿拉伯数字</p><h4 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h4><p>临时存储数据的<br>何时使用:如果数据需要临时存储的时候，那么就需要变量<br>关键字：程序中特殊含义的字符<br>如何使用:</p><ol><li>声明变量(var) 2.命名 (不能用关键字，不能用中文，不能用特殊符号，见名知<br>意，不能用纯数字，不能用数字打头，可以大写) 3.初始化</li><li>使用变量就相当于使用变量里面的数据</li><li>一个变量只能存一个数据</li><li>变量是可以更改的 变量名=新值</li><li>对于未声明的变量<strong>直接赋值</strong>，那么js会自动在<strong>全局声明</strong></li><li>变量声明提升：变量声明语句会自动提升到当前作用域最顶部</li><li>等号左边一定是变量，等号右边一定是数据或者表达式(结果是个数据)</li></ol><h4 id="5-控制台"><a href="#5-控制台" class="headerlink" title="5. 控制台"></a>5. 控制台</h4><p>是一个可以输出js代码的地方<br>作用：</p><ol><li>用来调试的 </li><li>提示错误 </li><li>扯淡</li></ol><p><em>控制台不报错不代表没有错，控制台报错了，不一定代表是所标注的错误，但是一<br>定代表有i错</em><br><code>console.log(要输出的数据)</code><br><code>alert()</code>: 作用：调试的 提示/警告 会中断程序运行</p><h4 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h4><h5 id="6-1-原始数据类型"><a href="#6-1-原始数据类型" class="headerlink" title="6.1 原始数据类型"></a>6.1 原始数据类型</h5><ol><li>Number(数字类型)</li><li>String(字符串) 字符或者字符与其他数据的组合<br>字符串一定要加引号，加引号的数据一定是字符串<br>如果引号嵌套的情况，双引号里面可以放单引号，单引号里面不允许放双引号<br>变量名不能加引号</li><li>Boolean(布尔类型) true false</li><li>undefined(未定义) 用来自动初始化变量的 <font color='cornflowerblue'>只定义未赋值，undefined类型的值也是undefined</font></li><li>null（空） 用来主动释放对象的</li></ol><h5 id="6-2-引用数据类型"><a href="#6-2-引用数据类型" class="headerlink" title="6.2 引用数据类型"></a>6.2 引用数据类型</h5><ol><li>array(数组)</li><li>object(对象) 函数也是对象</li></ol><h5 id="6-3-区别"><a href="#6-3-区别" class="headerlink" title="6.3 区别"></a>6.3 区别</h5><p>原始数据类型：数据存在变量本地 栈<br>引用数据类型：数据不存在变量本地 堆<br>栈 /堆：本质上是内存中的一块存储空间</p><h4 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7. 运算符"></a>7. 运算符</h4><ol><li>表达式：由运算符连接的，最终运算结果是一个值的式子<br>表达式跟值是等效的<br>程序模拟人类进行计算的符号</li><li>算术运算符：<code>+</code> 、<code>-</code> 、<code>*</code>、 <code>/</code>、 <code>%</code>、 <code>++</code> 、<code>--</code> 仅适用于number类型的数据<br>关于<code>++</code>，如果单独使用，放前放后都可以<br>如果不是单独使用，后<code>++</code>，先用旧值参与表达式，表达式结束之后再+1<br>前<code>++</code>，先+1，再参与表达式<br>关系运算符: <code>&gt;</code> 、<code>&lt;</code>、 <code>&gt;=</code>、<code> &lt;=</code>、<code> ==</code>、 <code>=== </code>、<code>!=</code>、<code> !==</code><br>不允许连着写</li><li>逻辑运算符：与<code>&amp;&amp;</code> 或<code>||</code> 非 <code>!</code></li><li>赋值运算符：<code>=</code> 、<code>+=</code>、<code>-=</code>、<code> *=</code>、<code>/=</code>、 <code>%=</code></li><li>字符串连接运算符：<code>+</code>任何数据与字符串拼接，结果都是字符串<br>三目(元)运算符： 条件<code>?</code>条件成立时候的值:条件不成立时候的值</li><li><code>typeof()</code>:用来检测数据类型</li><li><font color='cornflowerblue'>面试题（例题）</font><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//           (3       5        5) 打印出来13 </span>        <span class="token comment">//n = 4       5        6</span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment">//n是等于6的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="8-语句"><a href="#8-语句" class="headerlink" title="8. 语句"></a>8. 语句</h4><p>if else 可以进行多重条件判断<br>if(条件){条件成立时候执行的代码}else{条件不成立时候执行的代码 }<br>以下六种情况都算false<br><code>false</code> <code>0</code> <code>undefined</code> <code>null</code> <code>&quot;&quot;</code> <code>NaN</code>。<br><font color='cornflowerblue'>三元运算符：主要返回值，可以直接给其他变量赋值</font><br><font color='cornflowerblue'><code>if else</code> ：不能给直接给其他变量赋值，但是可以进行其他更多的操作</font></p><h4 id="9-隐式类型转换"><a href="#9-隐式类型转换" class="headerlink" title="9. 隐式类型转换"></a>9. 隐式类型转换</h4><p>js中的数据会根据具体情况自动改变数据的类型。<br><font color='cornflowerblue'><br>string + 其他类型：转换为字符串<br>Boolean + number: 转换为 number<br>number + undefined: 转换为 NaN  <strong>Nan不是数据类型，是个结果，表示算不出来</strong><br>number + null: 转换为number<br>null + boolean: 转换为number<br></font></p><h4 id="10-函数和方法"><a href="#10-函数和方法" class="headerlink" title="10. 函数和方法"></a>10. 函数和方法</h4><p><strong>什么情况下用函数</strong>：如果一段代码要反复调用，那么就考虑封装成函数了<br>封装一段执行专门任务的代码段。<br><strong>函数是不调用不执行的</strong><br>两种函数创建的方法：<br>方法一：函数声明方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   代码段<span class="token comment">//想干的事</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法二：函数字面量</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   代码段<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>函数的调用:函数名()</strong><br>参数：函数内独有的变量，接受函数外的数据，在函数内部处理，参数可以让方法更灵<br>活<br>形参：形式上的参数<br>实参：实际上的参数<br>参数不限制数量，不限制数据类型，多个参数之间以逗号隔开就行<br><strong>函数提升：整体提前</strong><br>return关键字：<br>函数是一个纯过程，没有任何结果。<br>如果函数的执行你需要一个结果，可以加return关键字<br>return 你想要的值 函数的结果就是return后面的表达式<br>return的本意其实是退出函数的运行，如果return后面有值的话，那么会在退出的<br>同时，返回一个结果</p><h4 id="11-作用域"><a href="#11-作用域" class="headerlink" title="11. 作用域"></a>11. 作用域</h4><p>一个变量可用的范围</p><ol><li>全局作用域：函数外，全局不能访问局部的数据</li><li>局部作用域：函数内, 局部内可以访问全局的数据</li></ol><p><strong>函数调用的时候才创建，调用结束之后立即销毁</strong><br>局部内要更改某个数据，优先用局部内的，局部内没有会往外层找<br>全局变量：在全局作用域内<font color="red">声明</font>的变量叫全局变量<br>局部变量：在局部作用域内<font color="red">声明</font>的变量叫局部变量<br><strong><font color="5696ff">函数作用域在函数调用那一刻开始创建，在调用结束后立即销毁，出于性能考虑</font></strong></p><h4 id="12-闭包"><a href="#12-闭包" class="headerlink" title="12. 闭包"></a>12. 闭包</h4><ol><li>概念：函数使用了<strong>不属于自己的局部变量</strong>，这种结构叫做<strong>闭包</strong>（函数套函数）</li><li>作用：保护变量/避免全局污染</li><li>性能问题：内存泄露（作用域中的局部变量一直被使用着，导致该作用域释放不掉）<br><font color="#5696hh">内层的局部作用域有权使用外部的作用域（一层一层往上找）</font></li></ol><p>例子1：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> n<span class="token operator">++</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> add<span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//getNum()的返回结果add赋给的全局变量c，而add中一直使用着getNum作用域的局部变量n，</span><span class="token comment">//所以全局变量c也是一直用着getNum作用域的局部变量n,因为全局变量c是不会被释放掉的，导致</span><span class="token comment">//getNum作用域中的局部变量n一直被使用，所以getNum作用域一直不会被释放掉。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'dov'</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//dov</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子3：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-循环语句"><a href="#13-循环语句" class="headerlink" title="13. 循环语句"></a>13. 循环语句</h4><p>循环：程序反复执行一套相同的代码<br>循环三要素：</p><ol><li>循环变量:循环中做判断的量 循环变量一定是向着循环退出的趋势去变化</li><li>循环条件：保证循环继续运行的条件</li><li>循环体：循环中每次要做的事</li></ol><ul><li>while循环</li><li>while(循环条件){要做的事}</li><li>for循环<br>用途：用作数组遍历<br>for(var i=0;i&lt;10;i++){要做的事}</li></ul><h4 id="14-数组"><a href="#14-数组" class="headerlink" title="14. 数组"></a>14. 数组</h4><ul><li>数组：批量存储多个同类数据的，多个数据以逗号隔开，数组是没有任何数据类型限制<br>的也没有任何数量限制的。</li><li>数组其实就相当于多个变量的集合</li><li>数组的访问：数组名[角标]</li><li>数组的更改 ：数组名[角标]=新值</li><li>数组的属性：length 直接返回数组的长度</li></ul><h4 id="15-对象"><a href="#15-对象" class="headerlink" title="15. 对象"></a>15. 对象</h4><ul><li>对象：用来存储多个数据的 是由多个键值对组成的 用来描述一个事物的<br>相当于多个变量的集合</li><li>格式： {key:value,key:value} 键/值对 属性名：属性值</li></ul><p><strong>对象的属性值是不限制数据类型的</strong><br><strong>对象的属性名一定是字符串，所以属性名可以省略引号，如果不加，js会自动帮你添加</strong></p><ul><li>对象的访问：对象.属性名</li><li>对象的更改：对象.属性名=新值 如果本身存在这个属性就是更改，本身如果没有，那就是添加</li><li>对象的属性的删除： delete 对象.属性</li><li>对象的循环： <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> 变量名 <span class="token keyword">in</span> 要遍历的对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>变量名代表的是属性<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong><font color="5696ff">对象的属性名如果是变量的话，那么需要加 [ ] </font></strong></li></ul><h4 id="16-内置对象"><a href="#16-内置对象" class="headerlink" title="16. 内置对象"></a>16. 内置对象</h4><ul><li>面向对象：通过操作对象去实现需求，不关心其中的过程</li><li>面向过程：</li><li><strong>内置对象：js中已经存在的，有着现成的属性和方法供我们使用<br>js中一共<font color="red">26</font>个内置对象</strong> </li><li>自定义对象：我们自己创建的对象</li><li><strong>基本包装类型</strong>：为了便于操作“基本类型值”，JS 提供了 三个 特殊的引用类型：<br>Boolean、Number、String。这些类型和其他引用类型相似，但同时 也具备 与各自基本类型相应的特殊行为。 <font color="5696ff">实际上：每当读取一个基本类型值的时候， “后台就会创建一个 对应的基本包装类型的对象”，从而能够调用一些方法来操作这些数据。</font><br><font color="red">下面介绍几种常用的内置对象</font></li></ul><h5 id="16-1-String对象"><a href="#16-1-String对象" class="headerlink" title="16.1 String对象"></a>16.1 String对象</h5><p><strong>字符串是不容更改的</strong></p><ul><li>length</li><li>toUpperCase(转大写)</li><li>toLowerCase(转小写)</li><li>substring(截取子字符串) 含头不含尾如果只给一个参数，代表从哪一位开始截取，截到最后</li><li>slice()同上  slice和substring都是含头不含尾，slice还可以截取数组（不改变原数组）</li><li>indexOf(查找关键字) 返回关键字符的角标，找到就结束 找不到返回-1</li><li>toString(转成字符串)</li><li>split(切割符) 可以把字符串切割成数组 一定会切成数组</li></ul><h5 id="16-2-Number对象"><a href="#16-2-Number对象" class="headerlink" title="16.2 Number对象"></a>16.2 Number对象</h5><ul><li>toString(转成字符串)<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//将number转换为字符串</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token number">10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//10 (10进制字符串)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//1010(2进制字符串)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//12（8进制字符串）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//a(16进制字符串)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>toFixed()按几位小数四舍五入取整<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token number">19.2356</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//19</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//19.24</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//19.236</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="16-3-Boolean对象"><a href="#16-3-Boolean对象" class="headerlink" title="16.3 Boolean对象"></a>16.3 Boolean对象</h5><ul><li>toString(转成字符串)<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true （字符串）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="16-4-Array对象"><a href="#16-4-Array对象" class="headerlink" title="16.4 Array对象"></a>16.4 Array对象</h5><ul><li>toString(转成字符串)</li><li>length</li><li>join(连接符)把数组连接成字符串，结果一定是字符串</li><li>slice()截取子数组</li><li>indexOf()</li><li>map()对数组进行处理，返回一个全新的数组</li><li>filter()返回一个符合指定条件的数组</li></ul><p>———-以上方法都不能修改原数组———————</p><ul><li>push()向数组的结尾追加元素</li><li>unshift()向数组的开头追加元素</li><li>pop()删除数组最后一位元素</li><li>shift()删除数组的第一位元素</li><li>splice(从哪一位开始删除,删几个,新值)在任意位置添加和删除元素，返回的是被处理后的数组</li><li>reverse()数组翻转</li><li>sort()数组排序 <pre class="line-numbers language-js" data-language="js"><code class="language-js">d<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 冒泡排序： <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">arrSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length ‐ <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length ‐ <span class="token number">1</span> ‐ j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> box <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> box         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">878</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">778</span><span class="token punctuation">,</span><span class="token number">986</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">778</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrSort</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="16-5-正则表达式RegExp"><a href="#16-5-正则表达式RegExp" class="headerlink" title="16.5 正则表达式RegExp"></a>16.5 正则表达式RegExp</h5><ul><li>正则表达式：定义字符串中字符出现的规律</li><li>正则表达式要求写在<code>/正则表达式/</code>中</li><li>中括号用来存放备选字符<br>一个中括号<code>[]</code>只能代表一位字符的匹配规则<br>正则表达式对于任意连续的区间都可以用<code>-</code>连接</li><li>数量词<code>&#123;&#125;</code>:<ol><li><code>&#123;num&#125;</code> 代表前面一位规则重复几次</li><li><code>&#123;min,&#125;</code>代表前面一位规则至少min，</li><li><code>&#123;min,max&#125;</code>代表前面一位规则至少min，最多max</li></ol></li><li>特殊数量词：<ol><li><code>?</code> 可有可无 最多一次 {0，1}</li><li><code>*</code> 可有可无 最多不限 {0，}</li><li><code>+</code> 至少一次 {1,}</li></ol></li><li>预定义字符集：在正则表达式中一些有特殊含义的字符<ol><li><code>\d</code> 代表了所有的数字</li><li><code>\w</code> 代表所有的数字字母下划线</li><li><code>.</code> 代表任意字符</li><li><code>\s</code> 代表空格</li></ol></li><li>如果备选字符中只有一个备选字符或者只有一个预定义字符集，那么中括号可省略</li><li>对于在正则表达式中有特殊含义的字符，如果希望以原文形式去匹配，需要用\转义 <strong>用法：</strong> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[/d]&#123;9,11&#125;$</span><span class="token regex-delimiter">/</span></span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>被检验的字符串<span class="token punctuation">)</span> <span class="token comment">//返回布尔值</span><span class="token comment">// 注意：正则表达式是部分匹配</span><span class="token comment">// 在整条正则表达式的开头加^代表以...开头，在整条正则表达式的结尾加$,代表以...结尾</span><span class="token comment">// 在中括号开头加^代表除了...都行</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^123]&#123;3,6&#125;$</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//不包含123这三种字符的3到6位字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="16-6-Math对象"><a href="#16-6-Math对象" class="headerlink" title="16.6 Math对象"></a>16.6 Math对象</h5></li><li>abs()取绝对值</li><li>round()四舍五入取整</li><li>ceil()向上取整</li><li>floor()向下取整</li><li>min()/max()注意不接受数组当参数，只能接受参数序列</li><li>random()取0-1之间的随机数</li></ul><h5 id="16-7-Date对象"><a href="#16-7-Date对象" class="headerlink" title="16.7 Date对象"></a>16.7 Date对象</h5><p><strong>封装了所有与日期相关的api</strong></p><ol><li>创建日期对象：new Date() 默认保存的是当前时间</li><li>日期对象可以直接相减，得到的是间隔毫秒数</li><li>getFullYear() 返回是哪年 number</li><li>getMonth()返回的是月份 0-11 要+1修正</li><li>getDate() 1-31</li><li>getDay() 0-6</li><li>getHours() 0-23</li><li>getMinutes() 0-59</li><li>getSeconds() 0-59</li><li>getMilliSeconds() 0-999</li><li>getTime()返回的是1970-1-1至今的毫秒数</li><li>以上get方法全改为set即为更改时间，注意，没有setDay()方法</li></ol><p><strong>创建一个指定时间日期:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2021/06/08 00:00:00"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="16-8-Error对象"><a href="#16-8-Error对象" class="headerlink" title="16.8 Error对象"></a>16.8 Error对象</h5><ul><li>SyntaxError(语法错误)</li><li>ReferenceError(引用错误)</li><li>TypeError(类型的错误)</li></ul><h4 id="17-DOM"><a href="#17-DOM" class="headerlink" title="17 DOM"></a>17 DOM</h4><p><strong>DOM: document object model</strong><br><strong>增删改查 crud</strong><br>   <font color="5696ff">所有写在元素开始标签之中的都是元素对象的属性</font></p><ol><li>查<br>查找元素<br>document.getElementById(“id名”) 返回元素对象<br>document.getElementsByClassName(“class名”) 返回数组<br>document.getElementsByTagName(“标签名”) 返回数组<br>document.getElementsByName(“名字”) 返回数组<br>document.querySelector(css选择器) 返回元素<strong>对象</strong><br>document.querySelectorAll(css选择器) 返回的<strong>数组</strong></li><li>改<ol><li><p>改属性<br>通过对象的方式<br>setAttribute(“属性名”,”属性值”)<br>getAttribute(“属性名”)</p></li><li><p>改内容<br>innerText 可以获取到元素开始标签到结束标签之间的文本内容<br>innerHTML可以获取到元素开始标签到结束标签之间的内容</p></li></ol></li><li>删<ol><li>删内容<br>innerHTML=””</li><li>删属性<br>removeAttribute(“属性名”)</li><li>删元素<br>父元素对象.removeChild(子元素对象)</li></ol></li><li>增<br>增加元素<ol><li>创建元素<br>document.createElement(“标签名”)</li><li>添加到对应的位置<br>父元素对象.appendChild(子元素对象)</li><li>添加属性和内容</li></ol></li></ol><h4 id="18-事件"><a href="#18-事件" class="headerlink" title="18 事件"></a>18 事件</h4><p>   用户的动作触发的：</p><ul><li>onclick: 点击事件</li><li>onfocus: 获得焦点事件</li><li>onblur: 失去焦点事件</li></ul><h4 id="19-this"><a href="#19-this" class="headerlink" title="19 this"></a>19 this</h4><p>   this指向的是函数运行时所在的对象（谁调用了函数，那么函数中的this就指向谁）<br>   window对象的属性和方法在访问的时候都可以省略前缀</p><h4 id="20-定时器"><a href="#20-定时器" class="headerlink" title="20 定时器"></a>20 定时器</h4><p>   定时器是让网页自动运行的唯一办法</p><ol><li>周期性定时器：每隔一段时间，做什么事<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span>函数<span class="token punctuation">,</span>间隔毫秒数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>一次性定时器：等待一定的时间，做什么事<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>函数<span class="token punctuation">,</span>等待毫秒数<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>定时器是一个多线程的程序，定时器的执行结果是一个线程号</li><li>停止定时器<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">clearInterval</span><span class="token punctuation">(</span>线程号<span class="token punctuation">)</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>线程号<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="21-原型与继承"><a href="#21-原型与继承" class="headerlink" title="21 原型与继承?"></a>21 原型与继承?</h4><p>   原型（prototype）: 方法背后，专门保存由方法创建出来的对象的共有属性。</p><ol><li>对象字面量形式：<code>var obj = &#123;name:&quot;小明&quot;,age:18&#125;</code></li><li>通过构造函数的形式：<code>new Date()</code>,<code>new Array()</code>,<code>new Object()</code>,<code>newRegExp()</code></li></ol><p>   构造函数/对象模板：专门用来创建相同结构的对象的专门方法</p><p>   <strong>new关键字做了那几件事情？</strong></p><ol><li>创建了一个空对象  var u = {}</li><li>改变this指向 call apply</li><li>增加 this.name=”小明” this.age=18</li><li>返回一个全新的对象 return u</li></ol><p>   <strong>共有属性</strong> ： 由统一构造函数创建出来的对象的共享有的属性<br>   <strong>自有属性</strong> ： 属于对象实例的私有方法<br>   <strong>任何对象没有权利修改原型的属性</strong><br>   <strong>继承</strong> ： 使用现有的类型，创建出新的类型，新的类型可以使用现有类型的属性和方法，也可以拓展出现有类型没有的属性和方法</p><h4 id="22-原型链"><a href="#22-原型链" class="headerlink" title="22 原型链?"></a>22 原型链?</h4><p>   <code>Function</code> : 代表的是所有函数的父类<br>   <code>__proto__</code>: 隐式原型。任何一个对象都有饮食原型，用来实现继承的一个对象的影视原型默认指向创建该对象的构造函数的原型对象</p><h4 id="23-绑定事件的第三种方式"><a href="#23-绑定事件的第三种方式" class="headerlink" title="23 绑定事件的第三种方式"></a>23 绑定事件的第三种方式</h4><p>   元素对象.addEventListener(“事件名”,方法对象,是否在补货阶段触发)</p><h4 id="24-事件触发周期"><a href="#24-事件触发周期" class="headerlink" title="24 事件触发周期?"></a>24 事件触发周期?</h4><p>   事件捕获（外–里）–目标触发–事件冒泡（里–外）<br>   事件对象：默认在事件触发的时候自动传入函数的第一个参数，与生俱来的，不是后天来的<br>   阻止冒泡：<code>e.stopPropagation</code>()<br>   事件委托：利用冒泡<br>   事件源对象：<code>e.target</code></p><h4 id="25-Ajax"><a href="#25-Ajax" class="headerlink" title="25 Ajax"></a>25 Ajax</h4><p>   <strong>前端向后端异步取数据而无需刷新页面技术</strong></p><ol><li>使用ajax的步骤<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1. 创建ajax核心对象</span><span class="token keyword">var</span> xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 创建请求 get/post 请求地址   是否异步</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"my.php?user=123411&amp;psd=123456"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//3. 发送请求参数 key=value形式的字符串 多个参数之间用&amp;连接</span><span class="token comment">// get请求：请求的参数不能写在send里（post请求要），要写在请求地址后面?连接，send传入参数null</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//如果请求方式为post，需要设置请求头</span>xmlhttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token comment">//4. 接收响应</span><span class="token comment">//onreadystatechange</span><span class="token comment">//readyState(请求状态)1(服务器已建立连接)2(请求已经接受)3(请求处理中)4(请求完成，响应就绪)0(请求未初始化)</span><span class="token comment">//status(服务端返回的状态码) 404（未找到界面） 500 200（ok） 301 304</span>xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//responseText 服务器端返回的文本格式数据</span>      <span class="token keyword">var</span> data <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="25-jQuery-：js库"><a href="#25-jQuery-：js库" class="headerlink" title="25 jQuery ：js库"></a>25 jQuery ：js库</h4><p><strong>简化版的js</strong></p><ol><li><p>常用的选择器</p><table><thead><tr><th>css选择器</th><th>jq选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>:first</code></td><td><code>$(&quot;p:first&quot;)</code></td><td>第一个<code>&lt;p&gt;</code>元素</td></tr><tr><td><code>:last</code></td><td><code>$(&quot;p:last&quot;)</code></td><td>最后一个<code>&lt;p&gt;</code>元素</td></tr><tr><td><code>:even</code></td><td><code>$(&quot;tr:even&quot;)</code></td><td>所有偶数<code>&lt;tr&gt;</code>元素，从0开始</td></tr><tr><td><code>:odd</code></td><td><code>$(&quot;tr:odd&quot;)</code></td><td>所有奇数…</td></tr><tr><td><code>:first-child</code></td><td><code>$(&quot;p:first-child&quot;)</code></td><td>属于其父元素的第一个子元素的所有<code>&lt;p&gt;</code>元素</td></tr><tr><td><code>element + next</code></td><td><code>$(&quot;div + p&quot;)</code></td><td>每个<code>&lt;div&gt;</code>元素响铃的下一个<code>&lt;p&gt;</code>元素</td></tr><tr><td><code>element ~ siblings</code></td><td><code>$(div ~ p)</code></td><td><code>&lt;div&gt;</code>元素的同级的所有<code>&lt;p&gt;</code>元素</td></tr><tr><td><code>:eq(index)</code></td><td><code>$(&quot;ul li:eq(3)&quot;)</code></td><td>列表中的第四个元素（index值从0开始）</td></tr><tr><td><code>:gt(no)</code></td><td><code>$(&quot;ul li:gt(3)&quot;)</code></td><td>列举index&gt;3的元素</td></tr><tr><td><code>:lt(no)</code></td><td><code>$(&quot;ul li:lt(3)&quot;)</code></td><td>列举index&lt;3的元素</td></tr><tr><td><code>:disabled</code></td><td><code>$(&quot;:disabled&quot;)</code></td><td>所有禁用的元素</td></tr><tr><td><code>selected</code></td><td><code>$(&quot;:selected&quot;)</code></td><td>所有选定的下拉元素</td></tr><tr><td><code>：checked</code></td><td><code>$(&quot;:checked&quot;)</code></td><td>所有选中的复选框选项</td></tr></tbody></table></li><li><p>页面元素隐藏和显示的方法<br><code>hide(ms) show(ms) toggle(ms)</code><br><code>fadeOut() fadeIn() fadeToggle()</code> 淡入淡出<br><code>slideUp() slideDown() slideToggle()</code> 滑入滑出</p></li><li><p>Css()直接改样式没有过程</p></li><li><p><code>animate(cssObj,ms)</code>修改样式动画效果</p></li><li><p><code>stop()</code>停止当前动画</p></li><li><p>jQuery允许链式调用：允许你连续执行多个jq方法，会按照绑定次序一次执行</p></li><li><p>jQuery的callback(回调函数)</p></li><li><p><code>html()</code> <code>text()</code> <code>val()</code> <code>attr(&quot;src&quot;)</code></p></li><li><p><code>append()</code> <code>prepend()</code> :在元素的开头插入内容  <code>after()</code> <code>before()</code></p></li><li><p><code>remove()</code> <code>empty()</code></p></li><li><p><code>$(this)</code></p></li><li><p>遍历方法：</p><ul><li><code>parent()</code> 当前元素的直接父级</li><li><code>parents()</code> …的所有父级</li><li><code>parentsUntil()</code></li><li><code>children(&quot;.box&quot;)</code> 找当前元素的直接子级（该子级元素叫”.box”）</li><li><code>find(&quot;div)</code> 找当前元素的所有子级（叫”div”的子级）</li><li><code>siblings()</code> 同胞，同级</li><li><code>next()</code>  当前元素的下一个同胞元素</li><li><code>nextAll()</code></li><li><code>nextUntil()</code></li><li><code>prev()</code></li><li><code>prevAll()</code></li><li><code>prevUntil()</code></li></ul></li><li><p>jQuery ajax<br>跨域问题:<br>  浏览器的同源策略 同协议 同域名 同端口号<br>解决跨域：jsonp 请求代理</p></li></ol><h4 id="26-ES6"><a href="#26-ES6" class="headerlink" title="26 ES6"></a>26 ES6</h4><h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><ol><li><p>let，const和var命令</p><ul><li>let声明的变量没有变量提升、不允许重复声明、只在块级作用域生效，<strong>暂时性死区</strong>：在一个块级作用域内，如果用let变量声明了某一个变量，那么该变量就自动绑定了该作用域，该作用域就形成了一个封闭的作用域</li><li>const声明常量，不可重复声明</li></ul></li><li><p>模板字符串</p><ul><li>模板字符串<code>``</code> 两个反引号，里面可以直接写变量，换行。变量要写在<code>$&#123;&#125;</code></li></ul></li><li><p>扩展运算符</p><ul><li><code>...</code>可以将数组或者类数组结构拆分为参数序列，也可以拆分对象（拆完对象还要用｛｝包起来）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//将数组作为参数序列传参</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token comment">//6</span><span class="token comment">//对对象进行拆分再组装</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>score1<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>score2<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span><span class="token operator">...</span>obj2<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的拓展</p><ul><li>默认参数：直接给形参复制，带有默认参数的变量放后面，因为传参时有顺序<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//6</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>箭头函数：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m<span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token parameter">m</span> <span class="token operator">=></span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>如果返回值是一个对象，对象外面要套括号，避免歧义<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>箭头函数中的this指向不变，永远指向函数定义时所在的对象</strong><br>箭头函数不能作为构造函数（不能new），因为this指向不能改变</p></li><li><p>解构赋值：</p><ul><li>变量的解构赋值：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment">//1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>对象的结构赋值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">//小明 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>多层对象嵌套解构赋值：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>hobby<span class="token operator">:</span><span class="token punctuation">&#123;</span>   sport<span class="token operator">:</span><span class="token punctuation">&#123;</span>      basketball<span class="token operator">:</span><span class="token string">"篮球"</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   move<span class="token operator">:</span><span class="token string">"钢铁侠"</span><span class="token punctuation">&#125;</span><span class="token comment">//解构出basketball</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>hobby<span class="token operator">:</span><span class="token punctuation">&#123;</span>sport<span class="token operator">:</span><span class="token punctuation">&#123;</span>basketball<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>basketball<span class="token punctuation">)</span> <span class="token comment">//篮球</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>对象的拓展：</p><ul><li>对象可以简写<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token operator">:</span>name<span class="token punctuation">,</span>   age<span class="token operator">:</span>age<span class="token punctuation">,</span>   <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//当对象的属性值是一个变量，并且该变量名跟属性名一样，那么可以简写成一个。</span><span class="token comment">//函数可以省略function</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   name<span class="token punctuation">,</span>   age   <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token operator">...</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Symbol新的原始数据类型"><a href="#2-Symbol新的原始数据类型" class="headerlink" title="2 Symbol新的原始数据类型"></a>2 Symbol新的原始数据类型</h5></li><li>symbol：类似于字符串，但是值永远独一无二的。</li><li>可以解决给对象添加属性时导致原有属性被覆盖的问题</li><li>可以传参做标记<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//Symbol(name)</span><span class="token comment">//创建了一个symbol类型的变量a，标记为name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h5 id="3-Set-——类似于数组的一种数据结构"><a href="#3-Set-——类似于数组的一种数据结构" class="headerlink" title="3 Set ——类似于数组的一种数据结构"></a>3 Set ——类似于数组的一种数据结构</h5>   <pre class="line-numbers language-js" data-language="js"><code class="language-js">      <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//参数只能是一个数组</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//Set &#123; 1, 3, 2 &#125;</span>      <span class="token comment">//循环</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token comment">//1   3   2</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> en <span class="token keyword">of</span> a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// [ 1, 1 ]</span>      <span class="token comment">// [ 3, 3 ]</span>      <span class="token comment">// [ 2, 2 ]</span>Waiting <span class="token keyword">for</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>set数据结构的值都是唯一的</li><li>set的一些方法：<ul><li>add()</li><li>delete()</li><li>has()</li><li>size()</li><li>keys() 遍历属性名</li><li>values() 遍历属性值</li><li>entries() 遍历属性名和属性值</li></ul></li></ul><h5 id="4-Map-——类似于对象的一种数据结构"><a href="#4-Map-——类似于对象的一种数据结构" class="headerlink" title="4 Map ——类似于对象的一种数据结构"></a>4 Map ——类似于对象的一种数据结构</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">567</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   一对   值—值</p><ul><li>Map的属性名不限于字符串，可以使任何类型</li><li><code>set(&quot;属性名&quot;,&quot;属性值&quot;)</code></li><li><code>get(&quot;属性名&quot;)</code> 取值</li><li><code>has(&quot;属性名&quot;)</code></li><li><code>delete(&quot;属性名&quot;)</code></li><li><code>clear(属性名)</code></li><li><code>size()</code></li><li>keys() 遍历属性名</li><li>values() 遍历属性值</li><li>entries() 遍历属性名和属性值</li></ul><h5 id="5-Promise"><a href="#5-Promise" class="headerlink" title="5 Promise"></a>5 Promise</h5><p>   优雅的异步编程解决方案，普通的异步编程会产生回调地域问题<br>   异步编程： ajax 定时器<br>   then()方法返回的是一个全新的promise实例<br>   —–待更新——</p><h5 id="6-async-await函数："><a href="#6-async-await函数：" class="headerlink" title="6 async await函数："></a>6 async await函数：</h5><ol><li>async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理<br>解 async 用于声明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</li><li>一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，<br><font color="red">await等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值</font><br>（换句话说，就是没有特殊限定）。</li><li>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数<br>的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回<br>值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，<br>await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token string">"something"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"hello async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，<br>await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。<br>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。<br>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着<br>Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li></ol><p>   <font color="red">案例</font><br>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span>         <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h5 id="7-模块化-module"><a href="#7-模块化-module" class="headerlink" title="7 模块化 module"></a>7 模块化 module</h5><ul><li>语法：<br>a.js文件<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 可以导出任何的变量声明语句或者函数声明语句(一定是一个完整的声明语句)</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>fn<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>b.js文件<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>fn<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>改名字：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a <span class="token keyword">as</span> b<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"a.js"</span> <span class="token comment">//从a.js文件中导入a变量并改名为b</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>c <span class="token keyword">as</span> cc<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><strong>默认导出</strong>：从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载<br>的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去<br>了解模块有哪些属性和方法，所以有了默认导出。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> a <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>   <strong>一个文件只能有一个默认导出</strong>,引入的时候不需要加大括号</p><ul><li>整体引入<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"./common.css"</span><span class="token keyword">import</span> <span class="token string">"./../js/main.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/04/27/hello-world/"/>
      <url>/2021/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
