<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2021/06/08/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/08/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-javaScript-负责网页功能的"><a href="#1-javaScript-负责网页功能的" class="headerlink" title="1. javaScript:负责网页功能的"></a>1. javaScript:负责网页功能的</h4><p>ECMAScript(核心) + DOM(页面操作) + BOM(浏览器操作相关的) <em>script需要放在body的结束标签之前</em></p><p><font color='cornflowerblue'>JS一般写在页面后面，目的是优先加在网页结构，再运行后台代码，提升用户体验</font></p><h4 id="2-编程语言"><a href="#2-编程语言" class="headerlink" title="2. 编程语言"></a>2. 编程语言</h4><p>c ：操作系统、嵌入式、驱动开发<br>c++ ：桌面软件、游戏 (英雄联盟)<br>c# ：Windows桌面软件、.NET Web、服务器<br>java:企业级应用，web开发、服务器后端<br>python<br>php<br>javaScript</p><h4 id="3-程序员"><a href="#3-程序员" class="headerlink" title="3. 程序员"></a>3. 程序员</h4><p>变量：内存中专门用来存储数据的空间<br>程序: 处理数据的 接受数据–处理数据–输出数据 程序运行在内存中<br>数据：语言啊 阿拉伯数字</p><h4 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h4><p>临时存储数据的<br>何时使用:如果数据需要临时存储的时候，那么就需要变量<br>关键字：程序中特殊含义的字符<br>如何使用:</p><ol><li>声明变量(var) 2.命名 (不能用关键字，不能用中文，不能用特殊符号，见名知<br>意，不能用纯数字，不能用数字打头，可以大写) 3.初始化</li><li>使用变量就相当于使用变量里面的数据</li><li>一个变量只能存一个数据</li><li>变量是可以更改的 变量名=新值</li><li>对于未声明的变量<strong>直接赋值</strong>，那么js会自动在<strong>全局声明</strong></li><li>变量声明提升：变量声明语句会自动提升到当前作用域最顶部</li><li>等号左边一定是变量，等号右边一定是数据或者表达式(结果是个数据)</li></ol><h4 id="5-控制台"><a href="#5-控制台" class="headerlink" title="5. 控制台"></a>5. 控制台</h4><p>是一个可以输出js代码的地方<br>作用：</p><ol><li>用来调试的 </li><li>提示错误 </li><li>扯淡</li></ol><p><em>控制台不报错不代表没有错，控制台报错了，不一定代表是所标注的错误，但是一<br>定代表有i错</em><br><code>console.log(要输出的数据)</code><br><code>alert()</code>: 作用：调试的 提示/警告 会中断程序运行</p><h4 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h4><h5 id="6-1-原始数据类型"><a href="#6-1-原始数据类型" class="headerlink" title="6.1 原始数据类型"></a>6.1 原始数据类型</h5><ol><li>Number(数字类型)</li><li>String(字符串) 字符或者字符与其他数据的组合<br>字符串一定要加引号，加引号的数据一定是字符串<br>如果引号嵌套的情况，双引号里面可以放单引号，单引号里面不允许放双引号<br>变量名不能加引号</li><li>Boolean(布尔类型) true false</li><li>undefined(未定义) 用来自动初始化变量的 <font color='cornflowerblue'>只定义未赋值，undefined类型的值也是undefined</font></li><li>null（空） 用来主动释放对象的</li></ol><h5 id="6-2-引用数据类型"><a href="#6-2-引用数据类型" class="headerlink" title="6.2 引用数据类型"></a>6.2 引用数据类型</h5><ol><li>array(数组)</li><li>object(对象) 函数也是对象</li></ol><h5 id="6-3-区别"><a href="#6-3-区别" class="headerlink" title="6.3 区别"></a>6.3 区别</h5><p>原始数据类型：数据存在变量本地 栈<br>引用数据类型：数据不存在变量本地 堆<br>栈 /堆：本质上是内存中的一块存储空间</p><h4 id="7-运算符"><a href="#7-运算符" class="headerlink" title="7. 运算符"></a>7. 运算符</h4><ol><li>表达式：由运算符连接的，最终运算结果是一个值的式子<br>表达式跟值是等效的<br>程序模拟人类进行计算的符号</li><li>算术运算符：<code>+</code> 、<code>-</code> 、<code>*</code>、 <code>/</code>、 <code>%</code>、 <code>++</code> 、<code>--</code> 仅适用于number类型的数据<br>关于<code>++</code>，如果单独使用，放前放后都可以<br>如果不是单独使用，后<code>++</code>，先用旧值参与表达式，表达式结束之后再+1<br>前<code>++</code>，先+1，再参与表达式<br>关系运算符: <code>&gt;</code> 、<code>&lt;</code>、 <code>&gt;=</code>、<code> &lt;=</code>、<code> ==</code>、 <code>=== </code>、<code>!=</code>、<code> !==</code><br>不允许连着写</li><li>逻辑运算符：与<code>&amp;&amp;</code> 或<code>||</code> 非 <code>!</code></li><li>赋值运算符：<code>=</code> 、<code>+=</code>、<code>-=</code>、<code> *=</code>、<code>/=</code>、 <code>%=</code></li><li>字符串连接运算符：<code>+</code>任何数据与字符串拼接，结果都是字符串<br>三目(元)运算符： 条件<code>?</code>条件成立时候的值:条件不成立时候的值</li><li><code>typeof()</code>:用来检测数据类型</li><li><font color='cornflowerblue'>面试题（例题）</font><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//           (4       4        5) 打印出来13 </span>cosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment">//n是等于6的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="8-语句"><a href="#8-语句" class="headerlink" title="8. 语句"></a>8. 语句</h4><p>if else 可以进行多重条件判断<br>if(条件){条件成立时候执行的代码}else{条件不成立时候执行的代码 }<br>以下六种情况都算false<br><code>false</code> <code>0</code> <code>undefined</code> <code>null</code> <code>&quot;&quot;</code> <code>NaN</code>。<br><font color='cornflowerblue'>三元运算符：主要返回值，可以直接给其他变量赋值</font><br><font color='cornflowerblue'><code>if else</code> ：不能给直接给其他变量赋值，但是可以进行其他更多的操作</font></p><h4 id="9-隐式类型转换"><a href="#9-隐式类型转换" class="headerlink" title="9. 隐式类型转换"></a>9. 隐式类型转换</h4><p>js中的数据会根据具体情况自动改变数据的类型。<br><font color='cornflowerblue'><br>string + 其他类型：转换为字符串<br>Boolean + number: 转换为 number<br>number + undefined: 转换为 NaN  <strong>Nan不是数据类型，是个结果，表示算不出来</strong><br></font></p><h4 id="10-函数和方法"><a href="#10-函数和方法" class="headerlink" title="10. 函数和方法"></a>10. 函数和方法</h4><p><strong>什么情况下用函数</strong>：如果一段代码要反复调用，那么就考虑封装成函数了<br>封装一段执行专门任务的代码段。<br><strong>函数是不调用不执行的</strong><br>两种函数创建的方法：<br>方法一：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   代码段<span class="token comment">//想干的事</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   代码段<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>函数的调用:函数名()</strong><br>参数：函数内独有的变量，接受函数外的数据，在函数内部处理，参数可以让方法更灵<br>活<br>形参：形式上的参数<br>实参：实际上的参数<br>参数不限制数量，不限制数据类型，多个参数之间以逗号隔开就行<br><strong>函数提升：整体提前</strong><br>return关键字：<br>函数是一个纯过程，没有任何结果。<br>如果函数的执行你需要一个结果，可以加return关键字<br>return 你想要的值 函数的结果就是return后面的表达式<br>return的本意其实是退出函数的运行，如果return后面有值的话，那么会在退出的<br>同时，返回一个结果</p><h4 id="11-作用域"><a href="#11-作用域" class="headerlink" title="11. 作用域"></a>11. 作用域</h4><p>一个变量可用的范围</p><ol><li>全局作用域：函数外，全局不能访问局部的数据</li><li>局部作用域：函数内, 局部内可以访问全局的数据</li></ol><p><strong>函数调用的时候才创建，调用结束之后立即销毁</strong><br>局部内要更改某个数据，优先用局部内的，局部内没有会往外层找<br>全局变量：在全局作用域内<font color="red">声明</font>的变量叫全局变量<br>局部变量：在局部作用域内<font color="red">声明</font>的变量叫局部变量<br><strong><font color="5696ff">函数作用域在函数调用那一刻开始创建，在调用结束后立即销毁，出于性能考虑</font></strong></p><h4 id="12-闭包"><a href="#12-闭包" class="headerlink" title="12. 闭包"></a>12. 闭包</h4><ol><li>概念：函数使用了<strong>不属于自己的局部变量</strong>，这种结构叫做<strong>闭包</strong>（函数套函数）</li><li>作用：保护变量/避免全局污染</li><li>性能问题：内存泄露（作用域中的局部变量一直被使用着，导致该作用域释放不掉）<br><font color="#5696hh">内层的局部作用域有权使用外部的作用域（一层一层往上找）</font></li></ol><p>例子1：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> n<span class="token operator">++</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> add<span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//getNum()的返回结果add赋给的全局变量c，而add中一直使用着getNum作用域的局部变量n，</span><span class="token comment">//所以全局变量c也是一直用着getNum作用域的局部变量n,因为全局变量c是不会被释放掉的，导致</span><span class="token comment">//getNum作用域中的局部变量n一直被使用，所以getNum作用域一直不会被释放掉。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'dov'</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//dov</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子3：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-循环语句"><a href="#13-循环语句" class="headerlink" title="13. 循环语句"></a>13. 循环语句</h4><p>循环：程序反复执行一套相同的代码<br>循环三要素：</p><ol><li>循环变量:循环中做判断的量 循环变量一定是向着循环退出的趋势去变化</li><li>循环条件：保证循环继续运行的条件</li><li>循环体：循环中每次要做的事</li></ol><ul><li>while循环</li><li>while(循环条件){要做的事}</li><li>for循环<br>用途：用作数组遍历<br>for(var i=0;i&lt;10;i++){要做的事}</li></ul><h4 id="14-数组"><a href="#14-数组" class="headerlink" title="14. 数组"></a>14. 数组</h4><ul><li>数组：批量存储多个同类数据的，多个数据以逗号隔开，数组是没有任何数据类型限制<br>的也没有任何数量限制的。</li><li>数组其实就相当于多个变量的集合</li><li>数组的访问：数组名[角标]</li><li>数组的更改 ：数组名[角标]=新值</li><li>数组的属性：length 直接返回数组的长度</li></ul><h4 id="15-对象"><a href="#15-对象" class="headerlink" title="15. 对象"></a>15. 对象</h4><ul><li>对象：用来存储多个数据的 是由多个键值对组成的 用来描述一个事物的<br>相当于多个变量的集合</li><li>格式： {key:value,key:value} 键/值对 属性名：属性值</li></ul><p><strong>对象的属性值是不限制数据类型的</strong><br><strong>对象的属性名一定是字符串，所以属性名可以省略引号，如果不加，js会自动帮你添加</strong></p><ul><li>对象的访问：对象.属性名</li><li>对象的更改：对象.属性名=新值 如果本身存在这个属性就是更改，本身如果没有，那就是添加</li><li>对象的属性的删除： delete 对象.属性</li><li>对象的循环： <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> 变量名 <span class="token keyword">in</span> 要遍历的对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>变量名代表的是属性<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong><font color="5696ff">对象的属性名如果是变量的话，那么需要加 [ ] </font></strong></li></ul><h4 id="16-内置对象"><a href="#16-内置对象" class="headerlink" title="16. 内置对象"></a>16. 内置对象</h4><ul><li>面向对象：通过操作对象去实现需求，不关心其中的过程</li><li>面向过程：</li><li><strong>内置对象：js中已经存在的，有着现成的属性和方法供我们使用<br>js中一共<font color="red">26</font>个内置对象</strong> </li><li>自定义对象：我们自己创建的对象</li><li><strong>基本包装类型</strong>：为了便于操作“基本类型值”，JS 提供了 三个 特殊的引用类型：<br>Boolean、Number、String。这些类型和其他引用类型相似，但同时 也具备 与各自基本类型相应的特殊行为。 <font color="5696ff">实际上：每当读取一个基本类型值的时候， “后台就会创建一个 对应的基本包装类型的对象”，从而能够调用一些方法来操作这些数据。</font><br><font color="red">下面介绍几种常用的内置对象</font></li></ul><h5 id="16-1-String对象"><a href="#16-1-String对象" class="headerlink" title="16.1 String对象"></a>16.1 String对象</h5><p><strong>字符串是不容更改的</strong></p><ul><li>length</li><li>toUpperCase(转大写)</li><li>toLowerCase(转小写)</li><li>substring(截取子字符串) 含头不含尾如果只给一个参数，代表从哪一位开始截取，截到最后</li><li>slice()同上</li><li>indexOf(查找关键字) 关键字符的角标 找到就结束 找不到返回-1</li><li>toString(转成字符串)</li><li>split(切割符) 可以把字符串切割成数组 一定会切成数组</li></ul><h5 id="16-2-Number对象"><a href="#16-2-Number对象" class="headerlink" title="16.2 Number对象"></a>16.2 Number对象</h5><ul><li>toString(转成字符串)</li><li>toFixed()按几位小数四舍五入取整</li></ul><h5 id="16-3-Boolean对象"><a href="#16-3-Boolean对象" class="headerlink" title="16.3 Boolean对象"></a>16.3 Boolean对象</h5><ul><li>toString(转成字符串)</li></ul><h5 id="16-4-Array对象"><a href="#16-4-Array对象" class="headerlink" title="16.4 Array对象"></a>16.4 Array对象</h5><ul><li>toString(转成字符串)</li><li>length</li><li>join(连接符)把数组连接成字符串，结果一定是字符串</li><li>slice()截取子数组</li><li>indexOf()</li><li>map()对数组进行处理，返回一个全新的数组</li><li>filter()返回一个符合指定条件的数组</li></ul><p>———-以上方法都不能修改原数组———————</p><ul><li>push()向数组的结尾追加元素</li><li>unshift()向数组的开头追加元素</li><li>pop()删除数组最后一位元素</li><li>shift()删除数组的第一位元素</li><li>splice(从哪一位开始删除,删几个,新值)在任意位置添加和删除元素，返回的是被处理后的数组</li><li>reverse()数组翻转</li><li>sort()数组排序 <pre class="line-numbers language-js" data-language="js"><code class="language-js">d<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 冒泡排序： <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">arrSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length ‐ <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length ‐ <span class="token number">1</span> ‐ j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> box <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> box         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">878</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">778</span><span class="token punctuation">,</span><span class="token number">986</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">778</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrSort</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="16-5-正则表达式RegExp"><a href="#16-5-正则表达式RegExp" class="headerlink" title="16.5 正则表达式RegExp"></a>16.5 正则表达式RegExp</h5><ul><li>正则表达式：定义字符串中字符出现的规律</li><li>正则表达式要求写在<code>/正则表达式/</code>中</li><li>中括号用来存放备选字符<br>一个中括号<code>[]</code>只能代表一位字符的匹配规则<br>正则表达式对于任意连续的区间都可以用<code>-</code>连接</li><li>数量词<code>&#123;&#125;</code>:<ol><li><code>&#123;num&#125;</code> 代表前面一位规则重复几次</li><li><code>&#123;min,&#125;</code>代表前面一位规则至少min，</li><li><code>&#123;min,max&#125;</code>代表前面一位规则至少min，最多max</li></ol></li><li>特殊数量词：<ol><li><code>?</code> 可有可无 最多一次 {0，1}</li><li><code>*</code> 可有可无 最多不限 {0，}</li><li><code>+</code> 至少一次 {1,}</li></ol></li><li>预定义字符集：在正则表达式中一些有特殊含义的字符<ol><li><code>\d</code> 代表了所有的数字</li><li><code>\w</code> 代表所有的数字字母下划线</li><li><code>.</code> 代表任意字符</li><li><code>\s</code> 代表空格</li></ol></li><li>如果备选字符中只有一个备选字符或者只有一个预定义字符集，那么中括号可省略</li><li>对于在正则表达式中有特殊含义的字符，如果希望以原文形式去匹配，需要用\转义 <strong>用法：</strong> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[/d]&#123;9,11&#125;$</span><span class="token regex-delimiter">/</span></span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>被检验的字符串<span class="token punctuation">)</span> <span class="token comment">//返回布尔值</span><span class="token comment">// 注意：正则表达式是部分匹配</span><span class="token comment">// 在整条正则表达式的开头加^代表以...开头，在整条正则表达式的结尾加$,代表以...结尾</span><span class="token comment">// 在中括号开头加^代表除了...都行</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^123]&#123;3,6&#125;$</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//不包含123这三种字符的3到6位字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="16-6-Math对象"><a href="#16-6-Math对象" class="headerlink" title="16.6 Math对象"></a>16.6 Math对象</h5></li><li>abs()取绝对值</li><li>round()四舍五入取整</li><li>ceil()向上取整</li><li>floor()向下取整</li><li>min()/max()注意不接受数组当参数，只能接受参数序列</li><li>random()取0-1之间的随机数</li></ul><h5 id="16-7-Date对象"><a href="#16-7-Date对象" class="headerlink" title="16.7 Date对象"></a>16.7 Date对象</h5><p><strong>封装了所有与日期相关的api</strong></p><ol><li>创建日期对象：new Date() 默认保存的是当前时间</li><li>日期对象可以直接相减，得到的是间隔毫秒数</li><li>getFullYear() 返回是哪年 number</li><li>getMonth()返回的是月份 0-11 要+1修正</li><li>getDate() 1-31</li><li>getDay() 0-6</li><li>getHours() 0-23</li><li>getMinutes() 0-59</li><li>getSeconds() 0-59</li><li>getMilliSeconds() 0-999</li><li>getTime()返回的是1970-1-1至今的毫秒数</li><li>以上get方法全改为set即为更改时间，注意，没有setDay()方法</li></ol><p><strong>创建一个指定时间日期:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2021/06/08 00:00:00"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="16-8-Error对象"><a href="#16-8-Error对象" class="headerlink" title="16.8 Error对象"></a>16.8 Error对象</h5><ul><li>SyntaxError(语法错误)</li><li>ReferenceError(引用错误)</li><li>TypeError(类型的错误)</li></ul><h4 id="17-DOM"><a href="#17-DOM" class="headerlink" title="17 DOM"></a>17 DOM</h4><p><strong>DOM: document object model</strong><br><strong>增删改查 crud</strong><br>   <font color="5696ff">所有写在元素开始标签之中的都是元素对象的属性</font></p><ol><li>查<br>查找元素<br>document.getElementById(“id名”) 返回元素对象<br>document.getElementsByClassName(“class名”) 返回数组<br>document.getElementsByTagName(“标签名”) 返回数组<br>document.getElementsByName(“名字”) 返回数组<br>document.querySelector(css选择器) 返回元素<strong>对象</strong><br>document.querySelectorAll(css选择器) 返回的<strong>数组</strong></li><li>改<ol><li><p>改属性<br>通过对象的方式<br>setAttribute(“属性名”,”属性值”)<br>getAttribute(“属性名”)</p></li><li><p>改内容<br>innerText 可以获取到元素开始标签到结束标签之间的文本内容<br>innerHTML可以获取到元素开始标签到结束标签之间的内容</p></li></ol></li><li>删<ol><li>删内容<br>innerHTML=””</li><li>删属性<br>removeAttribute(“属性名”)</li><li>删元素<br>父元素对象.removeChild(子元素对象)</li></ol></li><li>增<br>增加元素<ol><li>创建元素<br>document.createElement(“标签名”)</li><li>添加到对应的位置<br>父元素对象.appendChild(子元素对象)</li><li>添加属性和内容</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/04/27/hello-world/"/>
      <url>/2021/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
